import React, { useState, useEffect } from 'react';
import { CreditCard, DollarSign, Calendar, FileText, Download } from 'lucide-react';
import Input from '../ui/Input';
import Button from '../ui/Button';
import { calculateEMI } from '../../utils/calculations';
import { formatIndianNumber } from '../../utils/formatters';
import Logo from '../ui/Logo';

interface EMIDetails {
  emi: number;
  totalInterest: number;
  totalPayment: number;
  schedule: Array<{
    month: number;
    emi: number;
    principal: number;
    interest: number;
    balance: number;
  }>;
}

const EMICalculator: React.FC = () => {
  const [loanAmount, setLoanAmount] = useState<string>('100000');
  const [interestRate, setInterestRate] = useState<string>('10');
  const [loanTenure, setLoanTenure] = useState<string>('12');
  const [interestType, setInterestType] = useState<'reducing' | 'flat'>('reducing');
  const [showStatement, setShowStatement] = useState(false);
  const [emiResult, setEmiResult] = useState<EMIDetails | null>(null);

  const calculateEMIResult = () => {
    const amount = parseFloat(loanAmount || '0');
    const rate = parseFloat(interestRate || '0');
    const tenure = parseInt(loanTenure || '0', 10);
    
    if (amount > 0 && rate > 0 && tenure > 0) {
      const result = calculateEMI(amount, rate, tenure, interestType);
      setEmiResult(result);
    } else {
      setEmiResult(null);
    }
  };

  useEffect(() => {
    calculateEMIResult();
  }, [loanAmount, interestRate, loanTenure, interestType]);

  const downloadPDF = () => {
    if (!emiResult) return;

    const content = `
CC Calculator - Loan Repayment Schedule
=====================================

Loan Details:
------------
Loan Amount: ₹${formatIndianNumber(parseFloat(loanAmount))}
Interest Rate: ${interestRate}% (${interestType === 'reducing' ? 'Reducing Balance' : 'Flat Rate'})
Loan Tenure: ${loanTenure} months
Monthly EMI: ₹${formatIndianNumber(Math.round(emiResult.emi))}

Summary:
--------
Total Interest: ₹${formatIndianNumber(Math.round(emiResult.totalInterest))}
Total Payment: ₹${formatIndianNumber(Math.round(emiResult.totalPayment))}

Repayment Schedule:
-----------------
${emiResult.schedule.map(row => `
Month ${row.month}
EMI: ₹${formatIndianNumber(Math.round(row.emi))}
Principal: ₹${formatIndianNumber(Math.round(row.principal))}
Interest: ₹${formatIndianNumber(Math.round(row.interest))}
Balance: ₹${formatIndianNumber(Math.round(row.balance))}
----------------------------------------`).join('\n')}

Generated by CC Calculator
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'loan-schedule.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="rounded-xl overflow-hidden shadow-lg bg-background-light animate-fade-in">
      <div className="p-6">
        <h2 className="text-2xl font-bold mb-6 text-text-primary">EMI Calculator</h2>
        
        <div className="space-y-6">
          {/* Interest Type Selector */}
          <div className="flex gap-4 mb-6">
            <button
              onClick={() => setInterestType('reducing')}
              className={`flex-1 py-2 px-4 rounded-button ${
                interestType === 'reducing' 
                  ? 'bg-primary text-white' 
                  : 'bg-background text-text-secondary'
              }`}
            >
              Reducing Balance
            </button>
            <button
              onClick={() => setInterestType('flat')}
              className={`flex-1 py-2 px-4 rounded-button ${
                interestType === 'flat' 
                  ? 'bg-primary text-white' 
                  : 'bg-background text-text-secondary'
              }`}
            >
              Flat Rate
            </button>
          </div>

          {/* Loan Amount Input */}
          <div>
            <Input
              id="loanAmount"
              label="Loan Amount (₹)"
              value={loanAmount}
              onChange={(value) => setLoanAmount(value)}
              type="number"
              placeholder="Enter loan amount"
            />
            <input
              type="range"
              min="1000"
              max="10000000"
              value={loanAmount || 0}
              onChange={(e) => setLoanAmount(e.target.value)}
              className="w-full h-2 bg-background rounded-full mt-2 appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-primary"
            />
          </div>
          
          {/* Interest Rate Input */}
          <div>
            <Input
              id="interestRate"
              label="Interest Rate (% per annum)"
              value={interestRate}
              onChange={(value) => setInterestRate(value)}
              type="number"
              placeholder="Enter interest rate"
            />
            <input
              type="range"
              min="1"
              max="100"
              step="0.1"
              value={interestRate || 0}
              onChange={(e) => setInterestRate(e.target.value)}
              className="w-full h-2 bg-background rounded-full mt-2 appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-primary"
            />
          </div>
          
          {/* Loan Tenure Input */}
          <div>
            <Input
              id="loanTenure"
              label="Loan Tenure (months)"
              value={loanTenure}
              onChange={(value) => setLoanTenure(value)}
              type="number"
              placeholder="Enter loan tenure in months"
            />
            <input
              type="range"
              min="1"
              max="360"
              value={loanTenure || 0}
              onChange={(e) => setLoanTenure(e.target.value)}
              className="w-full h-2 bg-background rounded-full mt-2 appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-primary"
            />
          </div>
          
          {/* Results Display */}
          {emiResult && (
            <div className="bg-background rounded-button p-5 mt-4 grid grid-cols-1 divide-y divide-background-light">
              <div className="pb-4">
                <div className="flex items-center justify-between mb-1">
                  <div className="flex items-center">
                    <CreditCard size={18} className="text-primary mr-2" />
                    <p className="text-text-secondary text-sm">Monthly EMI:</p>
                  </div>
                  <button
                    onClick={() => setShowStatement(!showStatement)}
                    className="text-primary hover:text-primary-light"
                  >
                    <FileText size={18} />
                  </button>
                </div>
                <p className="text-2xl font-bold">₹ {formatIndianNumber(Math.round(emiResult.emi))}</p>
              </div>
              
              <div className="py-4">
                <div className="flex items-center mb-1">
                  <DollarSign size={18} className="text-primary mr-2" />
                  <p className="text-text-secondary text-sm">Total Interest:</p>
                </div>
                <p className="text-xl font-bold">₹ {formatIndianNumber(Math.round(emiResult.totalInterest))}</p>
              </div>
              
              <div className="pt-4">
                <div className="flex items-center mb-1">
                  <Calendar size={18} className="text-primary mr-2" />
                  <p className="text-text-secondary text-sm">Total Payment:</p>
                </div>
                <p className="text-xl font-bold">₹ {formatIndianNumber(Math.round(emiResult.totalPayment))}</p>
                <p className="text-xs text-text-secondary mt-1">
                  (Principal: ₹ {formatIndianNumber(parseInt(loanAmount))})
                </p>
              </div>
            </div>
          )}

          {/* Repayment Schedule */}
          {showStatement && emiResult && (
            <div className="mt-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">Repayment Schedule</h3>
                <button
                  onClick={downloadPDF}
                  className="flex items-center gap-2 text-primary hover:text-primary-light"
                >
                  <Download size={18} />
                  Download
                </button>
              </div>
              
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="bg-background">
                      <th className="p-2 text-left">Month</th>
                      <th className="p-2 text-right">EMI</th>
                      <th className="p-2 text-right">Principal</th>
                      <th className="p-2 text-right">Interest</th>
                      <th className="p-2 text-right">Balance</th>
                    </tr>
                  </thead>
                  <tbody>
                    {emiResult.schedule.map((row) => (
                      <tr key={row.month} className="border-t border-background">
                        <td className="p-2">{row.month}</td>
                        <td className="p-2 text-right">₹{formatIndianNumber(Math.round(row.emi))}</td>
                        <td className="p-2 text-right">₹{formatIndianNumber(Math.round(row.principal))}</td>
                        <td className="p-2 text-right">₹{formatIndianNumber(Math.round(row.interest))}</td>
                        <td className="p-2 text-right">₹{formatIndianNumber(Math.round(row.balance))}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EMICalculator;